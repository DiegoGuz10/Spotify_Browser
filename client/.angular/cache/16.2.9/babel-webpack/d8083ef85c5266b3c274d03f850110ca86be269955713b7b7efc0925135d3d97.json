{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ThermometerComponent {\n  constructor() {\n    //TODO: define Input fields and bind them to the template.\n    //Creates Input fields for the thermometer component to display the type of feature, what percent it is,\n    //and the hex color calculated through the track_feature.\n    this.featureType = \"blank\";\n    this.percentString = \"0%\";\n    this.color = \"#ffffff\";\n  }\n  ngOnInit() {}\n  static #_ = this.ɵfac = function ThermometerComponent_Factory(t) {\n    return new (t || ThermometerComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ThermometerComponent,\n    selectors: [[\"app-thermometer\"]],\n    inputs: {\n      featureType: \"featureType\",\n      percentString: \"percentString\",\n      color: \"color\"\n    },\n    decls: 4,\n    vars: 6,\n    consts: [[1, \"progress\"], [\"role\", \"progressbar\", 1, \"progress-bar\"], [1, \"progress-bar-text\"]],\n    template: function ThermometerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\", 2);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"background-color\", ctx.color)(\"width\", ctx.percentString);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate2(\"\", ctx.featureType, \": \", ctx.percentString, \"\");\n      }\n    },\n    styles: [\".progress[_ngcontent-%COMP%] {\\n\\tmargin: 10px;\\n\\theight: 20px;\\n\\toverflow: visible;\\n}\\n\\n.progress-bar[_ngcontent-%COMP%]   .progress-bar-text[_ngcontent-%COMP%] {\\n  position: absolute;\\n  text-shadow: 0px 0px 4px #444;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90aGVybW9tZXRlci90aGVybW9tZXRlci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0NBQ0MsWUFBWTtDQUNaLFlBQVk7Q0FDWixpQkFBaUI7QUFDbEI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsNkJBQTZCO0FBQy9CIiwic291cmNlc0NvbnRlbnQiOlsiLnByb2dyZXNzIHtcblx0bWFyZ2luOiAxMHB4O1xuXHRoZWlnaHQ6IDIwcHg7XG5cdG92ZXJmbG93OiB2aXNpYmxlO1xufVxuXG4ucHJvZ3Jlc3MtYmFyIC5wcm9ncmVzcy1iYXItdGV4dCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdGV4dC1zaGFkb3c6IDBweCAwcHggNHB4ICM0NDQ7XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["ThermometerComponent","constructor","featureType","percentString","color","ngOnInit","_","_2","selectors","inputs","decls","vars","consts","template","ThermometerComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵstyleProp","ɵɵtextInterpolate2"],"sources":["/Users/diegoguzman/Downloads/Spotify_Browser/client/src/app/components/thermometer/thermometer.component.ts","/Users/diegoguzman/Downloads/Spotify_Browser/client/src/app/components/thermometer/thermometer.component.html"],"sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-thermometer',\n  templateUrl: './thermometer.component.html',\n  styleUrls: ['./thermometer.component.css']\n})\nexport class ThermometerComponent implements OnInit {\n  //TODO: define Input fields and bind them to the template.\n\n  //Creates Input fields for the thermometer component to display the type of feature, what percent it is,\n  //and the hex color calculated through the track_feature.\n  @Input() featureType:string = \"blank\";\n  @Input() percentString:string = \"0%\";\n  @Input() color:string = \"#ffffff\";\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"progress\">\n  <div class=\"progress-bar\" role=\"progressbar\" [style.background-color]=\"color\" [style.width]=\"percentString\">\n  \t<span class=\"progress-bar-text\">{{featureType}}: {{percentString}}</span>\n  </div>\n</div>\n\n"],"mappings":";AAOA,OAAM,MAAOA,oBAAoB;EAS/BC,YAAA;IARA;IAEA;IACA;IACS,KAAAC,WAAW,GAAU,OAAO;IAC5B,KAAAC,aAAa,GAAU,IAAI;IAC3B,KAAAC,KAAK,GAAU,SAAS;EAEjB;EAEhBC,QAAQA,CAAA,GACR;EAAC,QAAAC,CAAA,G;qBAZUN,oBAAoB;EAAA;EAAA,QAAAO,EAAA,G;UAApBP,oBAAoB;IAAAQ,SAAA;IAAAC,MAAA;MAAAP,WAAA;MAAAC,aAAA;MAAAC,KAAA;IAAA;IAAAM,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,8BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCPjCE,EAAA,CAAAC,cAAA,aAAsB;QAEaD,EAAA,CAAAE,MAAA,GAAkC;QAAAF,EAAA,CAAAG,YAAA,EAAO;;;QAD7BH,EAAA,CAAAI,SAAA,GAAgC;QAAhCJ,EAAA,CAAAK,WAAA,qBAAAN,GAAA,CAAAZ,KAAA,CAAgC,UAAAY,GAAA,CAAAb,aAAA;QAC5Cc,EAAA,CAAAI,SAAA,GAAkC;QAAlCJ,EAAA,CAAAM,kBAAA,KAAAP,GAAA,CAAAd,WAAA,QAAAc,GAAA,CAAAb,aAAA,KAAkC"},"metadata":{},"sourceType":"module","externalDependencies":[]}